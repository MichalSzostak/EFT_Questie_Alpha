/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;



import java.util.HashMap;


import Models.Gamer;
import Models.Gamer_Item;
import Models.Item;

import controllers.DbHandler;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
/**
 *
 * @author micha
 */
public class MainWindow extends javax.swing.JFrame {


    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txtLogArea = new javax.swing.JTextArea();
        pnlStash = new javax.swing.JPanel();
        allGamersModel = new DefaultComboBoxModel();
        cboGamerSwitch = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        lblLevel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        gamerItemsModel = new DefaultListModel();
        lstItemsOwned = new javax.swing.JList<>();
        pnlAllItemsControls = new javax.swing.JPanel();
        btnAddItem = new javax.swing.JButton();
        btnStashDelete = new javax.swing.JButton();
        btnRemoveItem = new javax.swing.JButton();
        btnLVLplus = new javax.swing.JButton();
        btnLVLminus = new javax.swing.JButton();
        pnlAllItems2 = new javax.swing.JPanel();
        lblItemImage = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtAreaItemDescription = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        allItemsModel = new DefaultListModel();
        lstAllItems = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtLogArea.setColumns(20);
        txtLogArea.setRows(5);
        jScrollPane2.setViewportView(txtLogArea);

        pnlStash.setBorder(javax.swing.BorderFactory.createTitledBorder("Stash panel"));

        cboGamerSwitch.setModel(allGamersModel);
        cboGamerSwitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGamerSwitchActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose Gamer:");

        jLabel2.setText("Items in gamer's stash:");

        lstItemsOwned.setModel(gamerItemsModel);
        lstItemsOwned.setEnabled(false);
        jScrollPane3.setViewportView(lstItemsOwned);

        pnlAllItemsControls.setBorder(javax.swing.BorderFactory.createTitledBorder("Items Controls"));

        btnAddItem.setText("Add one");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnStashDelete.setText("Delete All ");
        btnStashDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStashDeleteActionPerformed(evt);
            }
        });

        btnRemoveItem.setText("Remove one ");
        btnRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAllItemsControlsLayout = new javax.swing.GroupLayout(pnlAllItemsControls);
        pnlAllItemsControls.setLayout(pnlAllItemsControlsLayout);
        pnlAllItemsControlsLayout.setHorizontalGroup(
            pnlAllItemsControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllItemsControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAllItemsControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnStashDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemoveItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAllItemsControlsLayout.setVerticalGroup(
            pnlAllItemsControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllItemsControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemoveItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStashDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnLVLplus.setText("LVL +");
        btnLVLplus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLVLplusActionPerformed(evt);
            }
        });

        btnLVLminus.setText("LVL -");
        btnLVLminus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLVLminusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlStashLayout = new javax.swing.GroupLayout(pnlStash);
        pnlStash.setLayout(pnlStashLayout);
        pnlStashLayout.setHorizontalGroup(
            pnlStashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStashLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStashLayout.createSequentialGroup()
                        .addGroup(pnlStashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlStashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlStashLayout.createSequentialGroup()
                                .addComponent(btnLVLminus, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnLVLplus, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cboGamerSwitch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlStashLayout.createSequentialGroup()
                        .addGroup(pnlStashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlAllItemsControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlStashLayout.setVerticalGroup(
            pnlStashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStashLayout.createSequentialGroup()
                .addGroup(pnlStashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboGamerSwitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlStashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlStashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLVLplus)
                        .addComponent(btnLVLminus)))
                .addGap(8, 8, 8)
                .addGroup(pnlStashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlStashLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(pnlAllItemsControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlAllItems2.setBorder(javax.swing.BorderFactory.createTitledBorder("All Items panel"));
        pnlAllItems2.setMaximumSize(new java.awt.Dimension(500, 397));

        lblItemImage.setBackground(new java.awt.Color(51, 51, 51));
        lblItemImage.setForeground(new java.awt.Color(0, 0, 0));
        lblItemImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblItemImage.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblItemImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblItemImage.setOpaque(true);

        txtAreaItemDescription.setColumns(20);
        txtAreaItemDescription.setLineWrap(true);
        txtAreaItemDescription.setRows(5);
        txtAreaItemDescription.setToolTipText("");
        txtAreaItemDescription.setWrapStyleWord(true);
        txtAreaItemDescription.setInheritsPopupMenu(true);
        jScrollPane6.setViewportView(txtAreaItemDescription);

        lstAllItems.setModel(allItemsModel);
        lstAllItems.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstAllItems.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAllItemsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstAllItems);

        javax.swing.GroupLayout pnlAllItems2Layout = new javax.swing.GroupLayout(pnlAllItems2);
        pnlAllItems2.setLayout(pnlAllItems2Layout);
        pnlAllItems2Layout.setHorizontalGroup(
            pnlAllItems2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllItems2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAllItems2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblItemImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlAllItems2Layout.setVerticalGroup(
            pnlAllItems2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllItems2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAllItems2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlAllItems2Layout.createSequentialGroup()
                        .addComponent(lblItemImage, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlStash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlAllItems2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(476, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(pnlStash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 342, Short.MAX_VALUE)
                        .addComponent(pnlAllItems2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        txtLogArea.append("Hello!");
        txtLogArea.append("\n formWindowOpened > PopulateAllItemsList()");
        PopulateAllItemsList();
        txtLogArea.append("\n formWindowOpened > PopulateListOfGamers()");
        PopulateListOfGamers();
    }//GEN-LAST:event_formWindowOpened

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed

       // txtOutNotify.append("\n AddItem()");
        //AddItem();        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnStashDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStashDeleteActionPerformed
       // txtOutNotify.append("\n RemoveAll()");
        //RemoveAll();        // TODO add your handling code here:        // TODO add your handling code here:
    }//GEN-LAST:event_btnStashDeleteActionPerformed
    private void btnRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveItemActionPerformed
        //txtOutNotify.append("\n RemoveItem()");
        //RemoveItem();
    }//GEN-LAST:event_btnRemoveItemActionPerformed
    private void btnLVLplusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLVLplusActionPerformed
       // txtOutNotify.append("\n IncreaseLevel()");
       // IncreaseLevel();// TODO add your handling code here:
    }//GEN-LAST:event_btnLVLplusActionPerformed
    private void btnLVLminusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLVLminusActionPerformed
        //txtOutNotify.append("DecreaseLevel() ");
        //DecreaseLevel();// TODO add your handling code here:
    }//GEN-LAST:event_btnLVLminusActionPerformed
    private void cboGamerSwitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGamerSwitchActionPerformed
        txtLogArea.append("\n cboGamerSwitchActionPerformed > PopulateLevel();");
        PopulateLevel();
        txtLogArea.append("\n cboGamerSwitchActionPerformed > PopulateItemsOwned();");
        PopulateItemsOwned();
    }//GEN-LAST:event_cboGamerSwitchActionPerformed
    private void lstAllItemsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAllItemsValueChanged
        PopulateItemInfoPanel();
    }//GEN-LAST:event_lstAllItemsValueChanged

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnLVLminus;
    private javax.swing.JButton btnLVLplus;
    private javax.swing.JButton btnRemoveItem;
    private javax.swing.JButton btnStashDelete;
    private javax.swing.JComboBox<Gamer> cboGamerSwitch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblItemImage;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JList<Item> lstAllItems;
    public javax.swing.JList<Gamer_Item> lstItemsOwned;
    private javax.swing.JPanel pnlAllItems2;
    private javax.swing.JPanel pnlAllItemsControls;
    private javax.swing.JPanel pnlStash;
    private javax.swing.JTextArea txtAreaItemDescription;
    private javax.swing.JTextArea txtLogArea;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel<Item> allItemsModel;
    private DefaultListModel<Gamer_Item> gamerItemsModel;
    private DefaultComboBoxModel<Gamer> allGamersModel;
    private int CurrentGamerID = 1;
    
    public void PopulateAllItemsList()  {
        DbHandler manager = new DbHandler();
        HashMap<Integer, Item> itemsHashMap;
        itemsHashMap = manager.Get_All_Items_Hashmap();
        int allItemsSize = itemsHashMap.size();
        
        for (int i = 1; i <=allItemsSize; i++)
        {
            Item tempItem = itemsHashMap.get(i);
            allItemsModel.addElement(tempItem);
        }    
    }
    public void PopulateListOfGamers()  {   
       DbHandler manager = new DbHandler();
       HashMap<Integer, Gamer> gamersHashMap;
       gamersHashMap = manager.Get_All_Gamers_HashMap(); 
       for(int i = 1; i <= gamersHashMap.size() ; i++)
       {
           Gamer tempGamer = gamersHashMap.get(i);
           allGamersModel.addElement(tempGamer);
       }
    }
    public void PopulateLevel()  {
                                                                                txtLogArea.append("\n Getting current Gamer's position in ComboBox..."
                                                                                                + "\n int currentGamerPosition = (cboGamerSwitch.getSelectedIndex());");
       int currentGamerPosition = (cboGamerSwitch.getSelectedIndex());
           
                                                                                txtLogArea.append("\n Getting Gamer's model from ComboBox..."
                                                                                                + "\n Gamer tempGamer = allGamersModel.getElementAt(currentGamerPosition);");
       Gamer tempGamer = allGamersModel.getElementAt(currentGamerPosition);
                                                                                txtLogArea.append("\n Getting Gamer's level from model..."
                                                                                                + "\n int tempGamerLevel = tempGamer.getGamer_Level();");       
       int tempGamerLevel = tempGamer.getGamer_Level();
                                                                                txtLogArea.append("\n Sending Gaemer's level to label..."
                                                                                                + "\n lblLevel.setText(\"Current Level: \" + tempGamerLevel);");
       lblLevel.setText("Current Level: " + tempGamerLevel);
    }
    public void PopulateItemsOwned()  {
                                                                                txtLogArea.append("\n Invoking DbHandler..."
                                                                                + "\n PopulateItemsOwned() > DbHandler manager = new DbHandler();");
        DbHandler manager = new DbHandler();        
        
                                                                                txtLogArea.append("\n Creating HashMap to store Gamer's Items..."
                                                                                + "\n HashMap<Integer, Gamer_Item> gamerItemsHashMap;");
        HashMap<Integer, Gamer_Item> gamerItemsHashMap; 
        
                                                                                txtLogArea.append("\n Calculating current Gamer's position in ComboBox..."
                                                                                + "\n int currentGamerPosition = (cboGamerSwitch.getSelectedIndex());");
        int currentGamerPosition = (cboGamerSwitch.getSelectedIndex());
        
                                                                                txtLogArea.append("\n Getting copy of current Gamer's model from ComboBox..."
                                                                                + "\n Gamer tempGamer = allGamersModel.getElementAt(currentGamerPosition);");
        Gamer tempGamer = allGamersModel.getElementAt(currentGamerPosition);
        
        
                                                                                txtLogArea.append("\n Getting Gamer_ID of current Gamer..."
                                                                                + "\n int tempGamerID = tempGamer.getGamer_ID();");
        int tempGamerID = tempGamer.getGamer_ID();
       
                                                                                txtLogArea.append("\n Gettin HashMap of Gamer's Items..."
                                                                                + "\n gamerItemsHashMap = manager.Get_Gamer_Item_Hashmap(getCurrentGamerID());");
        gamerItemsHashMap = manager.Get_Gamer_Item_Hashmap(tempGamerID);
        
                                                                                txtLogArea.append("\n Clearing GamerItems model..."
                                                                                + "\n gamerItemsModel.clear();");
        gamerItemsModel.clear();      
        
                                                                                txtLogArea.append("\n Looping through HashMap of Gamer's Items..."
                                                                                + "\n for (Gamer_Item x : gamerItemsHashMap.values())");
        int gamerItemsHashMapSize = gamerItemsHashMap.size();
                                                                                
        for (Integer i = 1; i<=gamerItemsHashMapSize; i++ )
        {
                                                                                txtLogArea.append("\n Creating Gamer_Item no. " + i
                                                                                + "\n Gamer_Item temp = gamerItemsHashMap.get(i);");
            Gamer_Item temp = gamerItemsHashMap.get(i);                         
                                                                                txtLogArea.append("\n Appending element: " + temp.toString()
                                                                                + "\n gamerItemsModel.addElement(temp);");
            gamerItemsModel.addElement(temp);
        }  
        
    }
    public int getCurrentGamerID() {
        return CurrentGamerID;
    }
    public void setCurrentGamerID(int CurrentGamerID) {
        this.CurrentGamerID = CurrentGamerID;
    }
    public void PopulateItemInfoPanel(){
        
        int tempCurrentIndex = lstAllItems.getSelectedIndex();
        Item tempItem = allItemsModel.getElementAt(tempCurrentIndex);
        String tempImageAddress = "C:\\Users\\micha\\Documents\\Coding projects\\NetBeans\\EFT_Questie_Alpha2\\src\\Images\\" + tempItem.getImage_Source();
        ImageIcon icon = new ImageIcon(tempImageAddress);
        lblItemImage.setIcon(icon);
        txtAreaItemDescription.setText(tempItem.getItem_Description());
        
    }

    
}

/*

//******************************************************************************
//
//METHODS:
//
//******************************************************************************
   
    // ITEMS *******************************************************************
        


    public void AddItem() {
        //String tempGamerID = (cboGamerSwitch.getSelectedIndex() + 1) + "." + (lstAllItems.getSelectedIndex() + 1);
        try {
            
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            
            txtOutNotify.append("\n Preparing query...");
            String queryString  = " SELECT Gamer_ID, Item_ID, Amount"
                                + " FROM Gamer_Items "
                                + " WHERE Item_ID = " + (lstAllItems.getSelectedIndex() + 1) +" AND Gamer_ID = "+ (cboGamerSwitch.getSelectedIndex() + 1);
            txtOutNotify.append("\n queryString = " + queryString);
            
            txtOutNotify.append("\n Executing...");
            Statement stmt = null;
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(queryString);//wildcard
            
            
            if (rs.next() == false) 
            {
                txtOutNotify.append("\n No results found, creating new entry...");
                
                txtOutNotify.append("\n Preparing insert query...");
                queryString = " INSERT INTO Gamer_Items (Gamer_ID, Item_ID, Amount)"
                            + " VALUES ("+ (cboGamerSwitch.getSelectedIndex() + 1) + " , " + (lstAllItems.getSelectedIndex() + 1) + ", 1)";
                txtOutNotify.append("\n queryString = " + queryString);
                
                txtOutNotify.append("\n Executing...");
                Statement stmt2 = null;
                stmt2 = con.createStatement();
                stmt2.executeUpdate(queryString);
                
                txtOutNotify.append("\n Re-populating gamer's stash...\n\n #AddItem():  [ PopulateItemsOwned() ]\n");
                PopulateItemsOwned();

            } 
            else 
            {
                txtOutNotify.append("\n Item's found in stash, increasing amount...");
                txtOutNotify.append("\n Preparing select query...");
                queryString = " SELECT Amount "
                            + " FROM Gamer_Items "
                            + " WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() + 1) + " AND Item_ID = " + (lstAllItems.getSelectedIndex() + 1);
                txtOutNotify.append("\n queryString = " + queryString);
                
                txtOutNotify.append("\n Executing...");
                Statement stmt2 = null;
                stmt2 = con.createStatement();
                ResultSet rs2 = stmt.executeQuery(queryString);
                
                
                while (rs2.next()) {
                    txtOutNotify.append("\n Getting current amount...");
                    String tempAmount = rs.getString("Amount");
                    txtOutNotify.append("\n Parsing...");
                    int tempAmountInt = Integer.parseInt(tempAmount);
                    txtOutNotify.append("\n Incrementing...");
                    tempAmountInt += 1;
                    
                    
                    txtOutNotify.append("\n Preparing update query...");
                    queryString = "UPDATE Gamer_Items "
                            + " SET Amount = " + tempAmountInt
                            + " WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() +1) + " AND Item_ID = " + (lstAllItems.getSelectedIndex() + 1);
                    txtOutNotify.append("\n queryString = " + queryString);
                    
                    txtOutNotify.append("\n Executing...");
                    Statement stmt3 = null;
                    stmt3 = con.createStatement();
                    int executeUpdate = stmt3.executeUpdate(queryString);
                    txtOutNotify.append("\n Success!\n int executeUpdate: " + executeUpdate + "\n");
                }
                
                txtOutNotify.append("\n Re-populating gamer's stash...\n\n #AddItem():  [ PopulateItemsOwned() ]\n");
                PopulateItemsOwned();

            }

        } catch (SQLException e) {
            System.out.println("SQL exception occured" + e);
        }        // TODO add your handling code here:
    }
    
    public void RemoveItem() {
        try {
            
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            
            txtOutNotify.append("\n Preparing select query...");
            String queryString  = " SELECT Gamer_ID, Item_ID, Amount"
                                + " FROM Gamer_Items "
                                + " WHERE Item_ID = " + (lstAllItems.getSelectedIndex() + 1) +" AND Gamer_ID = "+ (cboGamerSwitch.getSelectedIndex() + 1);
            txtOutNotify.append("\n queryString = " + queryString);
            
            txtOutNotify.append("\n Executing...");
            Statement stmt = null;
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(queryString);//wildcard
            
            
            if (rs.next() == false) 
            {
                txtOutNotify.append("\n Item not found...");
                txtOutNotify.append("\n Warning issued...");
                JOptionPane.showMessageDialog(rootPane, "This item is not in stash.");
                

            } 
            else 
            {
                txtOutNotify.append("\n Item's found in stash, decreasing amount...");
                txtOutNotify.append("\n Preparing select query...");
                queryString = " SELECT Amount "
                            + " FROM Gamer_Items "
                            + " WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() + 1) + " AND Item_ID = " + (lstAllItems.getSelectedIndex() + 1);
                txtOutNotify.append("\n queryString = " + queryString);
                
                txtOutNotify.append("\n Executing...");
                Statement stmt2 = null;
                stmt2 = con.createStatement();
                ResultSet rs2 = stmt.executeQuery(queryString);
                
                
                while (rs2.next()) {
                    txtOutNotify.append("\n Getting current amount...");
                    String tempAmount = rs.getString("Amount");
                    txtOutNotify.append("\n Parsing...");
                    int tempAmountInt = Integer.parseInt(tempAmount);
                    txtOutNotify.append("\n Decrementing...");
                    if(tempAmountInt>0)
                    {
                        tempAmountInt -= 1;
                        txtOutNotify.append("\n Preparing update query...");
                        queryString = "UPDATE Gamer_Items "
                                    + " SET Amount = " + tempAmountInt
                                    + " WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() +1) + " AND Item_ID = " + (lstAllItems.getSelectedIndex() + 1);
                        txtOutNotify.append("\n queryString = " + queryString);
                    
                        txtOutNotify.append("\n Executing...");
                        Statement stmt3 = null;
                        stmt3 = con.createStatement();
                        int executeUpdate = stmt3.executeUpdate(queryString);
                        txtOutNotify.append("\n Success!\n int executeUpdate: " + executeUpdate + "\n");
                    }
                    else
                    {
                        txtOutNotify.append("\n Amount already 0! Aborting...");
                        tempAmountInt=tempAmountInt;
                    }
                                        
                    
                }
                
                txtOutNotify.append("\n Re-populating gamer's stash...\n\n #AddItem():  [ PopulateItemsOwned() ]\n");
                PopulateItemsOwned();

            }

        } catch (SQLException e) {
            System.out.println("SQL exception occured" + e);
        }        // TODO add your handling code here:
    }
    
    public void RemoveAll(){
        try 
        {
            
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            
            
            
            txtOutNotify.append("\n Preparing delete query...");
            String queryString  = " DELETE "
                                + " FROM Gamer_Items "
                                + " WHERE Item_ID = " + (lstAllItems.getSelectedIndex() + 1) +" AND Gamer_ID = "+ (cboGamerSwitch.getSelectedIndex() + 1);
            txtOutNotify.append("\n queryString = " + queryString);
            
            txtOutNotify.append("\n Executing...");
            Statement stmt = null;
            stmt = con.createStatement();
            int executeUpdate = stmt.executeUpdate(queryString);
            txtOutNotify.append("\n Success!\n int executeUpdate: " + executeUpdate + "\n");
            
            txtOutNotify.append("\n Re-populating gamer's stash...\n\n #DeleteSelected():  [ PopulateItemsOwned() ]\n");
            PopulateItemsOwned();

        } catch (SQLException e) {
            System.out.println("SQL exception occured" + e);
        }        // TODO add your handling code here:
    }
    
    public void IncreaseLevel(){
        
        var tempLevel = 0;
        try 
            {
                txtOutNotify.append("\n Connecting to database...");
                Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
                
                txtOutNotify.append("\n Preparing SELECT query...");
                String queryString = "SELECT Level FROM Gamers WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() + 1);
                 txtOutNotify.append("\n queryString = " + queryString);
                
                txtOutNotify.append("\n Executing...");
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery (queryString) ;//wildcard
                
                while (rs.next()) 
                {
                    tempLevel = rs.getInt("Level");
                    tempLevel = tempLevel + 1;
                }
            }
         catch(SQLException e)
            {
                
                System.out.println("SQL exception occured" + e);
            }
        
        try 
        {
            
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            txtOutNotify.append("\n Preparing UPDATE query...");
            String queryString  = " UPDATE Gamers"
                                + " SET Level = " +  tempLevel
                                + " WHERE Gamer_ID = "+ (cboGamerSwitch.getSelectedIndex() + 1);
            txtOutNotify.append("\n queryString = " + queryString);
            
            txtOutNotify.append("\n Executing...");
            Statement stmt = null;
            stmt = con.createStatement();
            int executeUpdate = stmt.executeUpdate(queryString);
            txtOutNotify.append("\n Success!\n int executeUpdate: " + executeUpdate + "\n");
            
            txtOutNotify.append("\n\n Populating gamer's level...\n #IncreaseLevel():  PopulateLevel() ");   
            PopulateLevel();
            
        } catch (SQLException e) {
            System.out.println("SQL exception occured" + e);
        }        // TODO add your handling code here:
    }
    
    public void DecreaseLevel(){
        
        
        var tempLevel = 0;
        try 
            {
                txtOutNotify.append("\n Connecting to database...");
                Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
                
                txtOutNotify.append("\n Preparing SELECT query...");
                String queryString = "SELECT Level FROM Gamers WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() + 1);
                 txtOutNotify.append("\n queryString = " + queryString);
                
                txtOutNotify.append("\n Executing...");
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery (queryString) ;//wildcard
                
                while (rs.next()) 
                {
                    tempLevel = rs.getInt("Level");
                    if(tempLevel>1){
                        tempLevel = tempLevel - 1;
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "Level 1 is the lowest.");
                    }
                }
            }
         catch(SQLException e)
            {
                
                System.out.println("SQL exception occured" + e);
            }
        
        try 
        {
            
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            txtOutNotify.append("\n Preparing UPDATE query...");
            String queryString  = " UPDATE Gamers"
                                + " SET Level = " +  tempLevel
                                + " WHERE Gamer_ID = "+ (cboGamerSwitch.getSelectedIndex() + 1);
            txtOutNotify.append("\n queryString = " + queryString);
            
            txtOutNotify.append("\n Executing...");
            Statement stmt = null;
            stmt = con.createStatement();
            int executeUpdate = stmt.executeUpdate(queryString);
            txtOutNotify.append("\n Success!\n int executeUpdate: " + executeUpdate + "\n");
            
            txtOutNotify.append("\n\n Populating gamer's level...\n #IncreaseLevel():  PopulateLevel() ");   
            PopulateLevel();
            
        } catch (SQLException e) {
            System.out.println("SQL exception occured" + e);
        }        // TODO add your
    }
    
    
    // QUESTS ******************************************************************
    
    
    
    
    
*/
