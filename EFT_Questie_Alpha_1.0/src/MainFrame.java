/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

//********************************************************************************
//
//EVENTS:
//
//********************************************************************************

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cboGamerSwitch = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        lblLevel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstItemsOwnedModel = new DefaultListModel();
        lstItemsOwned = new javax.swing.JList<>(lstItemsOwnedModel);
        pnlAllItems = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstAllItemsModel = new DefaultListModel();
        lstAllItems = new javax.swing.JList<>();
        lblItemInfo = new javax.swing.JLabel();
        lblItemImage = new javax.swing.JLabel();
        pnlAllItemsControls = new javax.swing.JPanel();
        btnAddItem = new javax.swing.JButton();
        btnStashDelete = new javax.swing.JButton();
        btnRemoveItem = new javax.swing.JButton();
        pnlNotificationLog = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtOutNotify = new javax.swing.JTextArea();
        pnlQuestsMain = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Stash panel"));

        cboGamerSwitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGamerSwitchActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose Gamer:");

        lblLevel.setText("lvl XXX");

        jLabel2.setText("Items in gamer's stash:");

        lstItemsOwned.setModel(lstItemsOwnedModel);
        lstItemsOwned.setEnabled(false);
        jScrollPane2.setViewportView(lstItemsOwned);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(76, 76, 76))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboGamerSwitch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(24, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboGamerSwitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(lblLevel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlAllItems.setBorder(javax.swing.BorderFactory.createTitledBorder("All Items panel"));
        pnlAllItems.setMaximumSize(new java.awt.Dimension(500, 397));

        lstAllItems.setModel(lstAllItemsModel);
        lstAllItems.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstAllItems.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAllItemsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstAllItems);

        lblItemInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblItemInfo.setText("Items Info");
        lblItemInfo.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblItemInfo.setAutoscrolls(true);
        lblItemInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblItemInfo.setFocusable(false);
        lblItemInfo.setIconTextGap(20);
        lblItemInfo.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        lblItemImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblItemImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        pnlAllItemsControls.setBorder(javax.swing.BorderFactory.createTitledBorder("Stash Controls"));

        btnAddItem.setText("Add one");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnStashDelete.setText("Delete All ");
        btnStashDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStashDeleteActionPerformed(evt);
            }
        });

        btnRemoveItem.setText("Remove one ");
        btnRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAllItemsControlsLayout = new javax.swing.GroupLayout(pnlAllItemsControls);
        pnlAllItemsControls.setLayout(pnlAllItemsControlsLayout);
        pnlAllItemsControlsLayout.setHorizontalGroup(
            pnlAllItemsControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllItemsControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAllItemsControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnStashDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemoveItem))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAllItemsControlsLayout.setVerticalGroup(
            pnlAllItemsControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllItemsControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemoveItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStashDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnStashDelete.getAccessibleContext().setAccessibleName("btnStashDelete");

        javax.swing.GroupLayout pnlAllItemsLayout = new javax.swing.GroupLayout(pnlAllItems);
        pnlAllItems.setLayout(pnlAllItemsLayout);
        pnlAllItemsLayout.setHorizontalGroup(
            pnlAllItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAllItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAllItemsLayout.createSequentialGroup()
                        .addComponent(pnlAllItemsControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblItemInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                    .addComponent(lblItemImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlAllItemsLayout.setVerticalGroup(
            pnlAllItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllItemsLayout.createSequentialGroup()
                .addComponent(lblItemImage, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAllItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAllItemsLayout.createSequentialGroup()
                        .addComponent(pnlAllItemsControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 55, Short.MAX_VALUE))
                    .addGroup(pnlAllItemsLayout.createSequentialGroup()
                        .addComponent(lblItemInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAllItemsLayout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        lblItemInfo.getAccessibleContext().setAccessibleName("");

        pnlNotificationLog.setBorder(javax.swing.BorderFactory.createTitledBorder("Event Log"));

        txtOutNotify.setColumns(20);
        txtOutNotify.setRows(5);
        jScrollPane4.setViewportView(txtOutNotify);

        javax.swing.GroupLayout pnlNotificationLogLayout = new javax.swing.GroupLayout(pnlNotificationLog);
        pnlNotificationLog.setLayout(pnlNotificationLogLayout);
        pnlNotificationLogLayout.setHorizontalGroup(
            pnlNotificationLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNotificationLogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlNotificationLogLayout.setVerticalGroup(
            pnlNotificationLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNotificationLogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );

        pnlQuestsMain.setBorder(javax.swing.BorderFactory.createTitledBorder("Quests"));

        javax.swing.GroupLayout pnlQuestsMainLayout = new javax.swing.GroupLayout(pnlQuestsMain);
        pnlQuestsMain.setLayout(pnlQuestsMainLayout);
        pnlQuestsMainLayout.setHorizontalGroup(
            pnlQuestsMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );
        pnlQuestsMainLayout.setVerticalGroup(
            pnlQuestsMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlNotificationLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlAllItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlQuestsMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlNotificationLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlAllItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlQuestsMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboGamerSwitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGamerSwitchActionPerformed
        
        txtOutNotify.append("\n Populating gamer's level...\n\n #cboGamerSwitchActionPerformed: [ PopulateLevel() ]\n");
        PopulateLevel();
        txtOutNotify.append("\n Populating gamer's stash...\n\n #cboGamerSwitchActionPerformed:  [ PopulateItemsOwned() ]\n");
        PopulateItemsOwned();
    }//GEN-LAST:event_cboGamerSwitchActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       
        txtOutNotify.append("Window booting..."); 
        txtOutNotify.append("\n Hello! \n Starting systems... \n Populating loot table... \n\n #WindowOpened: [ PopulateAllItemsLst() ]");        
        PopulateAllItemsLst();
        txtOutNotify.append( "\n Updating list of gamers... \n\n #WindowOpened: [ PopulateListOfGamers() ]");
        PopulateListOfGamers();
    }//GEN-LAST:event_formWindowOpened

    private void btnStashDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStashDeleteActionPerformed
        txtOutNotify.append("\n Deleting item from stash...\n\n #btnAddItemActionPerformed: [ AddItem() ]");
        DeleteSelected();        // TODO add your handling code here:        // TODO add your handling code here:
    }//GEN-LAST:event_btnStashDeleteActionPerformed

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed

        txtOutNotify.append("\n Adding item to stash...\n\n #btnAddItemActionPerformed: [ AddItem() ]");
        AddItem();        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void lstAllItemsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAllItemsValueChanged

        txtOutNotify.append("\n Getting Item's info...");
        PopulateItemInfo();
    }//GEN-LAST:event_lstAllItemsValueChanged

    private void btnRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveItemActionPerformed
        txtOutNotify.append("\n Removing item from stash...\n\n #btnRemoveItemActionPerformed: [ RemoveItem() ]");
        DeleteAll();
    }//GEN-LAST:event_btnRemoveItemActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        // handle exception

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnRemoveItem;
    private javax.swing.JButton btnStashDelete;
    private javax.swing.JComboBox<String> cboGamerSwitch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblItemImage;
    private javax.swing.JLabel lblItemInfo;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JList<String> lstAllItems;
    public DefaultListModel lstAllItemsModel;
    public javax.swing.JList<String> lstItemsOwned;
    public DefaultListModel lstItemsOwnedModel;
    private javax.swing.JPanel pnlAllItems;
    private javax.swing.JPanel pnlAllItemsControls;
    private javax.swing.JPanel pnlNotificationLog;
    private javax.swing.JPanel pnlQuestsMain;
    private javax.swing.JTextArea txtOutNotify;
    // End of variables declaration//GEN-END:variables

//******************************************************************************
//
//METHODS:
//
//******************************************************************************
   
    // ITEMS *******************************************************************
        
    public void PopulateListOfGamers() {
        try {
            txtOutNotify.append("\n\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            Statement stmt = con.createStatement();

            txtOutNotify.append("\n Looking for gamers...");
            ResultSet rs = stmt.executeQuery("SELECT Gamer_Name FROM Gamers");//wildcard

            txtOutNotify.append("\n Adding gamers to the list...");
            while (rs.next()) {
                cboGamerSwitch.addItem(rs.getString("Gamer_Name"));
            }
        } catch (SQLException e) {
            txtOutNotify.append("\n SQL Database exception!");
            System.out.println("SQL exception occured" + e);
        }
    }

    public void PopulateLevel() {
        try {
            txtOutNotify.append("\nConnecting to database...\n [//data/EFT_Questie_DB.accdb] ");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            
            
            txtOutNotify.append("\n Preparing query...");
            String queryString = "SELECT Level FROM Gamers WHERE Gamer_ID =" + (cboGamerSwitch.getSelectedIndex() + 1);
            txtOutNotify.append("\n queryString = " + queryString);
            
            
            txtOutNotify.append("\n Executing...");
            Statement stmt = null;
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(queryString);//wildcard
            
            txtOutNotify.append("\n Interpreting...");
            while (rs.next()) {
                txtOutNotify.append("\n Applying changes...");
                lblLevel.setText("Level:" + rs.getString("Level"));
            }
        } catch (SQLException e) {
            txtOutNotify.append("\n SQL Esception!" + e);
            System.out.println("SQL exception occured" + e);
        }        // TODO add your handling code here:
    }

    public void PopulateItemsOwned() {
        try {
            
            
            
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            
            
            txtOutNotify.append("\n Preparing query...");
            String queryString = "SELECT Gamers.Gamer_ID, Items.Item_Name, Gamer_Items.Amount "
                    + " FROM Gamers "
                    + "JOIN Gamer_Items ON Gamers.Gamer_ID = Gamer_Items.Gamer_ID "
                    + "JOIN Items ON Gamer_Items.Item_ID = Items.Item_ID "
                    + "WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() + 1);
            txtOutNotify.append("\n queryString = " + queryString);
            
            
            txtOutNotify.append("\n Executing...");
            Statement stmt = null;
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(queryString);//wildcard
            
            txtOutNotify.append("\n Clearing list model...");
            lstItemsOwnedModel.clear();
            
            while (rs.next()) {
                txtOutNotify.append("\n Adding element and amount...");
                lstItemsOwnedModel.addElement(rs.getString("Item_Name") + ": " + rs.getString("Amount") + "x");
            }
            txtOutNotify.append("\n Success!\n");

        } catch (SQLException e) {
            System.out.println("\n SQL exception occured " + e + "\n");
        }        // TODO add your handling code here:
    }

    public void PopulateAllItemsLst() {
        try {
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            Statement stmt = null;
            String queryString = "SELECT * "
                    + " FROM Items ";

            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(queryString);//wildcard
            lstItemsOwnedModel.clear();
            while (rs.next()) {
                lstAllItemsModel.addElement(rs.getString("Item_Name"));
            }
        } catch (SQLException e) {
            System.out.println("SQL exception occured" + e);
        }        // TODO add your handling code here:
    }

    public void PopulateItemInfo() {
        try {
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            Statement stmt = null;
            
            int selectedItemID = lstAllItems.getSelectedIndex();
            txtOutNotify.append("\n Preparing query...");
            String queryString = "SELECT Item_Description, Image_Source "
                    + " FROM Items "
                    + "WHERE Item_ID = " + (selectedItemID + 1);

            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(queryString);//wildcard

            while (rs.next()) {
                String itemDescription = rs.getString("Item_Description");
                lblItemInfo.setText("<html>" + itemDescription + "</html>");
                String itemLocation = "C:\\Users\\micha\\Documents\\Coding projects\\NetBeansProjects\\EFT_Questie_Alpha_1.0\\src\\Images\\" + rs.getString("Image_Source");
                ImageIcon icon = new ImageIcon(itemLocation);
                lblItemImage.setIcon(icon);

            }
        } catch (SQLException e) {
            System.out.println("SQL exception occured" + e);
        }
    }

    public void AddItem() {
        //String tempGamerID = (cboGamerSwitch.getSelectedIndex() + 1) + "." + (lstAllItems.getSelectedIndex() + 1);
        try {
            
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            
            txtOutNotify.append("\n Preparing query...");
            String queryString  = " SELECT Gamer_ID, Item_ID, Amount"
                                + " FROM Gamer_Items "
                                + " WHERE Item_ID = " + (lstAllItems.getSelectedIndex() + 1) +" AND Gamer_ID = "+ (cboGamerSwitch.getSelectedIndex() + 1);
            txtOutNotify.append("\n queryString = " + queryString);
            
            txtOutNotify.append("\n Executing...");
            Statement stmt = null;
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(queryString);//wildcard
            
            
            if (rs.next() == false) 
            {
                txtOutNotify.append("\n No results found, creating new entry...");
                txtOutNotify.append("\n Preparing query...");
                queryString = " INSERT INTO Gamer_Items (Gamer_ID, Item_ID, Amount)"
                            + " VALUES ("+ (cboGamerSwitch.getSelectedIndex() + 1) + " , " + (lstAllItems.getSelectedIndex() + 1) + ", 1)";
                txtOutNotify.append("\n queryString = " + queryString);
                
                txtOutNotify.append("\n Executing...");
                Statement stmt2 = null;
                stmt2 = con.createStatement();
                stmt2.executeUpdate(queryString);
                
                txtOutNotify.append("\n Re-populating gamer's stash...\n\n #AddItem():  [ PopulateItemsOwned() ]\n");
                PopulateItemsOwned();

            } 
            else 
            {
                txtOutNotify.append("\n Item's found in stash, increasing amount...");
                txtOutNotify.append("\n Preparing select query...");
                queryString = " SELECT Amount "
                            + " FROM Gamer_Items "
                            + " WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() + 1) + " AND Item_ID = " + (lstAllItems.getSelectedIndex() + 1);
                txtOutNotify.append("\n queryString = " + queryString);
                
                txtOutNotify.append("\n Executing...");
                Statement stmt2 = null;
                stmt2 = con.createStatement();
                ResultSet rs2 = stmt.executeQuery(queryString);
                
                
                while (rs2.next()) {
                    txtOutNotify.append("\n Getting current amount...");
                    String tempAmount = rs.getString("Amount");
                    txtOutNotify.append("\n Parsing...");
                    int tempAmountInt = Integer.parseInt(tempAmount);
                    txtOutNotify.append("\n Incrementing...");
                    tempAmountInt += 1;
                    
                    
                    txtOutNotify.append("\n Preparing update query...");
                    queryString = "UPDATE Gamer_Items "
                            + " SET Amount = " + tempAmountInt
                            + " WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() +1) + " AND Item_ID = " + (lstAllItems.getSelectedIndex() + 1);
                    txtOutNotify.append("\n queryString = " + queryString);
                    
                    txtOutNotify.append("\n Executing...");
                    Statement stmt3 = null;
                    stmt3 = con.createStatement();
                    int executeUpdate = stmt3.executeUpdate(queryString);
                    txtOutNotify.append("\n Success!\n int executeUpdate: " + executeUpdate + "\n");
                }
                
                txtOutNotify.append("\n Re-populating gamer's stash...\n\n #AddItem():  [ PopulateItemsOwned() ]\n");
                PopulateItemsOwned();

            }

        } catch (SQLException e) {
            System.out.println("SQL exception occured" + e);
        }        // TODO add your handling code here:
    }
    
    public void DeleteAll() {
        try {
            
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            
            txtOutNotify.append("\n Preparing select query...");
            String queryString  = " SELECT Gamer_ID, Item_ID, Amount"
                                + " FROM Gamer_Items "
                                + " WHERE Item_ID = " + (lstAllItems.getSelectedIndex() + 1) +" AND Gamer_ID = "+ (cboGamerSwitch.getSelectedIndex() + 1);
            txtOutNotify.append("\n queryString = " + queryString);
            
            txtOutNotify.append("\n Executing...");
            Statement stmt = null;
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(queryString);//wildcard
            
            
            if (rs.next() == false) 
            {
                txtOutNotify.append("\n No results found, creating new entry...");
                txtOutNotify.append("\n Preparing query...");
                queryString = " INSERT INTO Gamer_Items (Gamer_ID, Item_ID, Amount)"
                            + " VALUES ("+ (cboGamerSwitch.getSelectedIndex() + 1) + " , " + (lstAllItems.getSelectedIndex() + 1) + ", 1)";
                txtOutNotify.append("\n queryString = " + queryString);
                
                txtOutNotify.append("\n Executing...");
                Statement stmt2 = null;
                stmt2 = con.createStatement();
                stmt2.executeUpdate(queryString);
                
                txtOutNotify.append("\n Re-populating gamer's stash...\n\n #AddItem():  [ PopulateItemsOwned() ]\n");
                PopulateItemsOwned();

            } 
            else 
            {
                txtOutNotify.append("\n Item's found in stash, increasing amount...");
                txtOutNotify.append("\n Preparing search query...");
                queryString = " SELECT Amount "
                            + " FROM Gamer_Items "
                            + " WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() + 1) + " AND Item_ID = " + (lstAllItems.getSelectedIndex() + 1);
                txtOutNotify.append("\n queryString = " + queryString);
                
                txtOutNotify.append("\n Executing...");
                Statement stmt2 = null;
                stmt2 = con.createStatement();
                ResultSet rs2 = stmt.executeQuery(queryString);
                
                
                while (rs2.next()) {
                    txtOutNotify.append("\n Getting current amount...");
                    String tempAmount = rs.getString("Amount");
                    txtOutNotify.append("\n Parsing...");
                    int tempAmountInt = Integer.parseInt(tempAmount);
                    txtOutNotify.append("\n Incrementing...");
                    tempAmountInt += 1;
                    
                    
                    txtOutNotify.append("\n Preparing update query...");
                    queryString = "UPDATE Gamer_Items "
                            + " SET Amount = " + tempAmountInt
                            + " WHERE Gamer_ID = " + (cboGamerSwitch.getSelectedIndex() +1) + " AND Item_ID = " + (lstAllItems.getSelectedIndex() + 1);
                    txtOutNotify.append("\n queryString = " + queryString);
                    
                    txtOutNotify.append("\n Executing...");
                    Statement stmt3 = null;
                    stmt3 = con.createStatement();
                    int executeUpdate = stmt3.executeUpdate(queryString);
                    txtOutNotify.append("\n Success!\n int executeUpdate: " + executeUpdate + "\n");
                }
                
                txtOutNotify.append("\n Re-populating gamer's stash...\n\n #AddItem():  [ PopulateItemsOwned() ]\n");
                PopulateItemsOwned();

            }

        } catch (SQLException e) {
            System.out.println("SQL exception occured" + e);
        }        // TODO add your handling code here:
    }
    
    public void DeleteSelected(){
        try 
        {
            
            txtOutNotify.append("\n Connecting to database...");
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://data/EFT_Questie_DB.accdb");
            
            
            
            txtOutNotify.append("\n Preparing delete query...");
            String queryString  = " DELETE "
                                + " FROM Gamer_Items "
                                + " WHERE Item_ID = " + (lstAllItems.getSelectedIndex() + 1) +" AND Gamer_ID = "+ (cboGamerSwitch.getSelectedIndex() + 1);
            txtOutNotify.append("\n queryString = " + queryString);
            
            txtOutNotify.append("\n Executing...");
            Statement stmt = null;
            stmt = con.createStatement();
            int executeUpdate = stmt.executeUpdate(queryString);
            txtOutNotify.append("\n Success!\n int executeUpdate: " + executeUpdate + "\n");
            
            txtOutNotify.append("\n Re-populating gamer's stash...\n\n #DeleteSelected():  [ PopulateItemsOwned() ]\n");
            PopulateItemsOwned();

        } catch (SQLException e) {
            System.out.println("SQL exception occured" + e);
        }        // TODO add your handling code here:
    }
    
    // QUESTS ******************************************************************
    
    
    
    
    
    
    
    
    
    
}
